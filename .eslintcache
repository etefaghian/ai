[{"/home/etefaghian/Desktop/ai_final/src/index.tsx":"1","/home/etefaghian/Desktop/ai_final/src/reportWebVitals.ts":"2","/home/etefaghian/Desktop/ai_final/src/App.tsx":"3","/home/etefaghian/Desktop/ai_final/src/components/board/Board.tsx":"4","/home/etefaghian/Desktop/ai_final/src/components/board/ball/Ball.tsx":"5","/home/etefaghian/Desktop/ai_final/src/ai/miniMax.ts":"6","/home/etefaghian/Desktop/ai_final/src/ai/utils.ts":"7","/home/etefaghian/Desktop/ai_final/src/components/main/Main.tsx":"8","/home/etefaghian/Desktop/ai_final/src/components/restartButton/RestartButton.tsx":"9"},{"size":500,"mtime":1607726327975,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1607726327979,"results":"12","hashOfConfig":"11"},{"size":337,"mtime":1609527265468,"results":"13","hashOfConfig":"11"},{"size":2901,"mtime":1609539504560,"results":"14","hashOfConfig":"11"},{"size":1252,"mtime":1609541364579,"results":"15","hashOfConfig":"11"},{"size":1320,"mtime":1609525380610,"results":"16","hashOfConfig":"11"},{"size":4454,"mtime":1609524396377,"results":"17","hashOfConfig":"11"},{"size":733,"mtime":1609539716912,"results":"18","hashOfConfig":"11"},{"size":409,"mtime":1609540502379,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1y4kjh3",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/etefaghian/Desktop/ai_final/src/index.tsx",[],["41","42"],"/home/etefaghian/Desktop/ai_final/src/reportWebVitals.ts",[],"/home/etefaghian/Desktop/ai_final/src/App.tsx",["43"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Main } from \"./components/main/Main\";\n\nfunction App() {\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={{ width: \"25%\" }}></div>\n      <Main></Main>\n      <div style={{ width: \"25%\" }}></div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/etefaghian/Desktop/ai_final/src/components/board/Board.tsx",["44","45"],"/home/etefaghian/Desktop/ai_final/src/components/board/ball/Ball.tsx",["46"],"/home/etefaghian/Desktop/ai_final/src/ai/miniMax.ts",[],"/home/etefaghian/Desktop/ai_final/src/ai/utils.ts",["47"],"import _ from \"lodash\";\nexport const getNextBoards = (\n  board: number[][],\n  isBlack: boolean\n): number[][][] => {\n  const nextBoards: number[][][] = new Array();\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const newBoardU = canMoveUp(board, isBlack, [i, j]);\n      if (newBoardU) nextBoards.push(newBoardU);\n      const newBoardD = canMoveDown(board, isBlack, [i, j]);\n      if (newBoardD) nextBoards.push(newBoardD);\n      const newBoardL = canMoveLeft(board, isBlack, [i, j]);\n      if (newBoardL) nextBoards.push(newBoardL);\n      const newBoardR = canMoveRight(board, isBlack, [i, j]);\n      if (newBoardR) nextBoards.push(newBoardR);\n    }\n  }\n  return nextBoards;\n};\n\nconst canMoveUp = (\n  board: number[][],\n  isBlack: boolean,\n  position: [number, number]\n): number[][] | null => {\n  if (position[0] < 1) {\n    return null;\n  }\n\n  if (\n    isBlack &&\n    board[position[0] - 1][position[1]] === -1 &&\n    board[position[0]][position[1]] === 1\n  ) {\n    const newArray = _.cloneDeep(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0] - 1][position[1]] = 1;\n    return newArray;\n  }\n  if (\n    !isBlack &&\n    board[position[0] - 1][position[1]] === 1 &&\n    board[position[0]][position[1]] === -1\n  ) {\n    const newArray = _.cloneDeep(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0] - 1][position[1]] = -1;\n    return newArray;\n  }\n  return null;\n};\n\nconst canMoveDown = (\n  board: number[][],\n  isBlack: boolean,\n  position: [number, number]\n): number[][] | null => {\n  if (position[0] > board.length - 2) {\n    return null;\n  }\n\n  if (\n    isBlack &&\n    board[position[0] + 1][position[1]] === -1 &&\n    board[position[0]][position[1]] === 1\n  ) {\n    const newArray = _.cloneDeep(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0] + 1][position[1]] = 1;\n    return newArray;\n  }\n  if (\n    !isBlack &&\n    board[position[0] + 1][position[1]] === 1 &&\n    board[position[0]][position[1]] === -1\n  ) {\n    const newArray = _.cloneDeep(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0] + 1][position[1]] = -1;\n    return newArray;\n  }\n  return null;\n};\n\nconst canMoveLeft = (\n  board: number[][],\n  isBlack: boolean,\n  position: [number, number]\n): number[][] | null => {\n  if (position[1] < 1) {\n    return null;\n  }\n\n  if (\n    isBlack &&\n    board[position[0]][position[1] - 1] === -1 &&\n    board[position[0]][position[1]] === 1\n  ) {\n    const newArray = copyArray(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0]][position[1] - 1] = 1;\n    return newArray;\n  }\n  if (\n    !isBlack &&\n    board[position[0]][position[1] - 1] === 1 &&\n    board[position[0]][position[1]] === -1\n  ) {\n    const newArray = copyArray(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0]][position[1] - 1] = -1;\n    return newArray;\n  }\n  return null;\n};\n\nconst canMoveRight = (\n  board: number[][],\n  isBlack: boolean,\n  position: [number, number]\n): number[][] | null => {\n  if (position[1] > board[0].length - 2) {\n    return null;\n  }\n\n  if (\n    isBlack &&\n    board[position[0]][position[1] + 1] === -1 &&\n    board[position[0]][position[1]] === 1\n  ) {\n    const newArray = copyArray(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0]][position[1] + 1] = 1;\n    return newArray;\n  }\n  if (\n    !isBlack &&\n    board[position[0]][position[1] + 1] === 1 &&\n    board[position[0]][position[1]] === -1\n  ) {\n    const newArray = copyArray(board);\n    newArray[position[0]][position[1]] = 0;\n    newArray[position[0]][position[1] + 1] = -1;\n    return newArray;\n  }\n  return null;\n};\n\nexport const copyArray = (array: number[][]): number[][] => {\n  const copiedArray: number[][] = [];\n  for (let i = 0; i < array.length; i++) {\n    copiedArray[i] = [];\n    for (let j = 0; j < array[i].length; j++) {\n      copiedArray[i][j] = array[i][j];\n    }\n  }\n  return copiedArray;\n};\n\nexport const getBlackValue = (board: number[][]): number => {\n  let blackCount = 0;\n  let whiteCount = 0;\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      board[i][j] === 1 && blackCount++;\n\n      board[i][j] === -1 && whiteCount++;\n    }\n  }\n  return blackCount - whiteCount;\n};\n\nexport const getBlackEstimate = (board: number[][]): number => {\n  return getNextBoards(board, true).length;\n};\n","/home/etefaghian/Desktop/ai_final/src/components/main/Main.tsx",[],"/home/etefaghian/Desktop/ai_final/src/components/restartButton/RestartButton.tsx",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":12},{"ruleId":"56","severity":1,"message":"57","line":39,"column":6,"nodeType":"58","endLine":39,"endColumn":12,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"60","line":46,"column":6,"nodeType":"58","endLine":46,"endColumn":18,"suggestions":"61"},{"ruleId":"52","severity":1,"message":"62","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":29},{"ruleId":"63","severity":1,"message":"64","line":6,"column":36,"nodeType":"65","messageId":"66","endLine":6,"endColumn":47,"fix":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'board' and 'sel1'. Either include them or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has a missing dependency: 'board'. Either include it or remove the dependency array. You can also do a functional update 'setBoard(b => ...)' if you only need 'board' in the 'setBoard' call.",["71"],"'isPropertySignature' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"72","text":"73"},"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},[151,162],"[]","Update the dependencies array to be: [board, sel1, sel2]",{"range":"78","text":"79"},"Update the dependencies array to be: [board, isComputer]",{"range":"80","text":"81"},[1103,1109],"[board, sel1, sel2]",[1232,1244],"[board, isComputer]"]